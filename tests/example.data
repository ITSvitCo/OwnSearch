["HTTP Server Reference \u2014 aiohttp 1.0.2- documentation", "HTTP Server Reference", "Request", "The Request object contains all the information about an incoming HTTP request.", "Every", "handler", "accepts a request instance as the\nfirst positional parameter.", "A", "Request", "is a", "dict", "-like object, allowing it to be used for", "sharing data", "among", "Middlewares", "and", "Signals", "handlers.", "Although", "Request", "is", "dict", "-like object, it can\u2019t be duplicated\nlike one using", "Request.copy()", ".", "Note", "You should never create the", "Request", "instance manually \u2013", "aiohttp.web", "does it for you.", "class", "aiohttp.web.", "Request", "[source]", "scheme", "A string representing the scheme of the request.", "The scheme is", "'https'", "if transport for request handling is", "SSL", "or", "secure_proxy_ssl_header", "is matching.", "'http'", "otherwise.", "Read-only", "str", "property.", "See also", "Application.make_handler()", "method", "HTTP method", ", read-only property.", "The value is upper-cased", "str", "like", "\"GET\"", ",", "\"POST\"", ",", "\"PUT\"", "etc.", "version", "HTTP version", "of request, Read-only property.", "Returns", "aiohttp.protocol.HttpVersion", "instance.", "host", "HOST", "header of request, Read-only property.", "Returns", "str", "or", "None", "if HTTP request has no", "HOST", "header.", "path_qs", "The URL including PATH_INFO and the query string. e.g.,", "/app/blog?id=10", "Read-only", "str", "property.", "path", "The URL including", "PATH INFO", "without the host or scheme. e.g.,", "/app/blog", ". The path is URL-unquoted. For raw path info see", "raw_path", ".", "Read-only", "str", "property.", "raw_path", "The URL including raw", "PATH INFO", "without the host or scheme.\nWarning, the path may be quoted and may contains non valid URL\ncharacters, e.g.", "/my%2Fpath%7Cwith%21some%25strange%24characters", ".", "For unquoted version please take a look on", "path", ".", "Read-only", "str", "property.", "query_string", "The query string in the URL, e.g.,", "id=10", "Read-only", "str", "property.", "GET", "A multidict with all the variables in the query string.", "Read-only", "MultiDictProxy", "lazy property.", "Changed in version 0.17:", "A multidict contains empty items for query string like", "?arg=", ".", "POST", "A multidict with all the variables in the POST parameters.\nPOST property available only after", "Request.post()", "coroutine call.", "Read-only", "MultiDictProxy", ".", "Raises:", "RuntimeError", "\u2013 if", "Request.post()", "was not called before accessing the property.", "headers", "A case-insensitive multidict proxy with all headers.", "Read-only", "CIMultiDictProxy", "property.", "raw_headers", "HTTP headers of response as unconverted bytes, a sequence of", "(key,", "value)", "pairs.", "keep_alive", "True", "if keep-alive connection enabled by HTTP client and\nprotocol version supports it, otherwise", "False", ".", "Read-only", "bool", "property.", "match_info", "Read-only property with", "AbstractMatchInfo", "instance for result of route resolving.", "Note", "Exact type of property depends on used router.  If", "app.router", "is", "UrlDispatcher", "the property contains", "UrlMappingMatchInfo", "instance.", "app", "An", "Application", "instance used to call", "request handler", ", Read-only property.", "transport", "An", "transport", "used to process request,\nRead-only property.", "The property can be used, for example, for getting IP address of\nclient\u2019s peer:", "peername", "=", "request", ".", "transport", ".", "get_extra_info", "(", "'peername'", ")", "if", "peername", "is", "not", "None", ":", "host", ",", "port", "=", "peername", "cookies", "A multidict of all request\u2019s cookies.", "Read-only", "MultiDictProxy", "lazy property.", "content", "A", "StreamReader", "instance,\ninput stream for reading request\u2019s", "BODY", ".", "Read-only property.", "has_body", "Return", "True", "if request has", "HTTP BODY", ",", "False", "otherwise.", "Read-only", "bool", "property.", "New in version 0.16.", "content_type", "Read-only property with", "content", "part of", "Content-Type", "header.", "Returns", "str", "like", "'text/html'", "Note", "Returns value is", "'application/octet-stream'", "if no\nContent-Type header present in HTTP headers according to", "RFC 2616", "charset", "Read-only property that specifies the", "encoding", "for the request\u2019s BODY.", "The value is parsed from the", "Content-Type", "HTTP header.", "Returns", "str", "like", "'utf-8'", "or", "None", "if", "Content-Type", "has no charset information.", "content_length", "Read-only property that returns length of the request\u2019s BODY.", "The value is parsed from the", "Content-Length", "HTTP header.", "Returns", "int", "or", "None", "if", "Content-Length", "is absent.", "if_modified_since", "Read-only property that returns the date specified in the", "If-Modified-Since", "header.", "Returns", "datetime.datetime", "or", "None", "if", "If-Modified-Since", "header is absent or is not a valid\nHTTP date.", "coroutine", "read", "(", ")", "[source]", "Read request body, returns", "bytes", "object with body content.", "Note", "The method", "does", "store read data internally, subsequent", "read()", "call will return the same value.", "coroutine", "text", "(", ")", "[source]", "Read request body, decode it using", "charset", "encoding or", "UTF-8", "if no encoding was specified in", "MIME-type", ".", "Returns", "str", "with body content.", "Note", "The method", "does", "store read data internally, subsequent", "text()", "call will return the same value.", "coroutine", "json", "(", "*", ",", "loads=json.loads", ")", "[source]", "Read request body decoded as", "json", ".", "The method is just a boilerplate", "coroutine", "implemented as:", "async", "def", "json", "(", "self", ",", "*", ",", "loads", "=", "json", ".", "loads", "):", "body", "=", "await", "self", ".", "text", "()", "return", "loads", "(", "body", ")", "Parameters:", "loads", "(", "callable", ") \u2013 any", "callable", "that accepts", "str", "and returns", "dict", "with parsed JSON (", "json.loads()", "by\ndefault).", "Note", "The method", "does", "store read data internally, subsequent", "json()", "call will return the same value.", "coroutine", "multipart", "(", "*", ",", "reader=aiohttp.multipart.MultipartReader", ")", "[source]", "Returns", "aiohttp.multipart.MultipartReader", "which processes\nincoming", "multipart", "request.", "The method is just a boilerplate", "coroutine", "implemented as:", "async", "def", "multipart", "(", "self", ",", "*", ",", "reader", "=", "aiohttp", ".", "multipart", ".", "MultipartReader", "):", "return", "reader", "(", "self", ".", "headers", ",", "self", ".", "_payload", ")", "This method is a coroutine for consistency with the else reader methods.", "Warning", "The method", "does not", "store read data internally. That means once\nyou exhausts multipart reader, you cannot get the request payload one\nmore time.", "See also", "Working with Multipart", "coroutine", "post", "(", ")", "[source]", "A", "coroutine", "that reads POST parameters from\nrequest body.", "Returns", "MultiDictProxy", "instance filled\nwith parsed data.", "If", "method", "is not", "POST", ",", "PUT", "or", "PATCH", "or", "content_type", "is not empty or", "application/x-www-form-urlencoded", "or", "multipart/form-data", "returns empty multidict.", "Note", "The method", "does", "store read data internally, subsequent", "post()", "call will return the same value.", "coroutine", "release", "(", ")", "[source]", "Release request.", "Eat unread part of HTTP BODY if present.", "Note", "User code may never call", "release()", ", all\nrequired work will be processed by", "aiohttp.web", "internal machinery.", "Response classes", "For now,", "aiohttp.web", "has two classes for the", "HTTP response", ":", "StreamResponse", "and", "Response", ".", "Usually you need to use the second one.", "StreamResponse", "is\nintended for streaming data, while", "Response", "contains", "HTTP\nBODY", "as an attribute and sends own content as single piece with the\ncorrect", "Content-Length HTTP header", ".", "For sake of design decisions", "Response", "is derived from", "StreamResponse", "parent class.", "The response supports", "keep-alive", "handling out-of-the-box if", "request", "supports it.", "You can disable", "keep-alive", "by", "force_close()", "though.", "The common case for sending an answer from", "web-handler", "is returning a", "Response", "instance:", "def", "handler", "(", "request", "):", "return", "Response", "(", "\"All right!\"", ")", "StreamResponse", "class", "aiohttp.web.", "StreamResponse", "(", "*", ",", "status=200", ",", "reason=None", ")", "[source]", "The base class for the", "HTTP response", "handling.", "Contains methods for setting", "HTTP response headers", ",", "cookies", ",", "response status code", ", writing", "HTTP response BODY", "and so on.", "The most important thing you should know about", "response", "\u2014 it\nis", "Finite State Machine", ".", "That means you can do any manipulations with", "headers", ",", "cookies", "and", "status code", "only before", "prepare()", "coroutine is called.", "Once you call", "prepare()", "any change of\nthe", "HTTP header", "part will raise", "RuntimeError", "exception.", "Any", "write()", "call after", "write_eof()", "is also forbidden.", "Parameters:", "status", "(", "int", ") \u2013 HTTP status code,", "200", "by default.", "reason", "(", "str", ") \u2013 HTTP reason. If param is", "None", "reason will be\ncalculated basing on", "status", "parameter. Otherwise pass", "str", "with\narbitrary", "status", "explanation..", "prepared", "Read-only", "bool", "property,", "True", "if", "prepare()", "has\nbeen called,", "False", "otherwise.", "New in version 0.18.", "started", "Deprecated alias for", "prepared", ".", "Deprecated since version 0.18.", "status", "Read-only property for", "HTTP response status code", ",", "int", ".", "200", "(OK) by default.", "reason", "Read-only property for", "HTTP response reason", ",", "str", ".", "set_status", "(", "status", ",", "reason=None", ")", "[source]", "Set", "status", "and", "reason", ".", "reason", "value is auto calculated if not specified (", "None", ").", "keep_alive", "Read-only property, copy of", "Request.keep_alive", "by default.", "Can be switched to", "False", "by", "force_close()", "call.", "force_close", "(", ")", "[source]", "Disable", "keep_alive", "for connection. There are no ways to\nenable it back.", "compression", "Read-only", "bool", "property,", "True", "if compression is enabled.", "False", "by default.", "See also", "enable_compression()", "enable_compression", "(", "force=None", ")", "[source]", "Enable compression.", "When", "force", "is unset compression encoding is selected based on\nthe request\u2019s", "Accept-Encoding", "header.", "Accept-Encoding", "is not checked if", "force", "is set to a", "ContentCoding", ".", "See also", "compression", "chunked", "Read-only property, indicates if chunked encoding is on.", "Can be enabled by", "enable_chunked_encoding()", "call.", "See also", "enable_chunked_encoding", "enable_chunked_encoding", "(", ")", "[source]", "Enables", "chunked", "encoding for response. There are no ways to\ndisable it back. With enabled", "chunked", "encoding each", "write()", "operation encoded in separate chunk.", "Warning", "chunked encoding can be enabled for", "HTTP/1.1", "only.", "Setting up both", "content_length", "and chunked\nencoding is mutually exclusive.", "See also", "chunked", "headers", "CIMultiiDct", "instance\nfor", "outgoing", "HTTP headers", ".", "cookies", "An instance of", "http.cookies.SimpleCookie", "for", "outgoing", "cookies.", "Warning", "Direct setting up", "Set-Cookie", "header may be overwritten by\nexplicit calls to cookie manipulation.", "We are encourage using of", "cookies", "and", "set_cookie()", ",", "del_cookie()", "for cookie\nmanipulations.", "set_cookie", "(", "name", ",", "value", ",", "*", ",", "path='/'", ",", "expires=None", ",", "domain=None", ",", "max_age=None", ",", "secure=None", ",", "httponly=None", ",", "version=None", ")", "[source]", "Convenient way for setting", "cookies", ", allows to specify\nsome additional properties like", "max_age", "in a single call.", "Parameters:", "name", "(", "str", ") \u2013 cookie name", "value", "(", "str", ") \u2013 cookie value (will be converted to", "str", "if value has another type).", "expires", "\u2013 expiration date (optional)", "domain", "(", "str", ") \u2013 cookie domain (optional)", "max_age", "(", "int", ") \u2013 defines the lifetime of the cookie, in\nseconds.  The delta-seconds value is a\ndecimal non- negative integer.  After\ndelta-seconds seconds elapse, the client\nshould discard the cookie.  A value of zero\nmeans the cookie should be discarded\nimmediately.  (optional)", "path", "(", "str", ") \u2013 specifies the subset of URLs to\nwhich this cookie applies. (optional,", "'/'", "by default)", "secure", "(", "bool", ") \u2013 attribute (with no value) directs\nthe user agent to use only (unspecified)\nsecure means to contact the origin server\nwhenever it sends back this cookie.\nThe user agent (possibly under the user\u2019s\ncontrol) may determine what level of\nsecurity it considers appropriate for\n\u201csecure\u201d cookies.  The", "secure", "should be\nconsidered security advice from the server\nto the user agent, indicating that it is in\nthe session\u2019s interest to protect the cookie\ncontents. (optional)", "httponly", "(", "bool", ") \u2013", "True", "if the cookie HTTP only (optional)", "version", "(", "int", ") \u2013 a decimal integer, identifies to which\nversion of the state management\nspecification the cookie\nconforms. (Optional,", "version=1", "by default)", "Warning", "In HTTP version 1.1,", "expires", "was deprecated and replaced with\nthe easier-to-use", "max-age", ", but Internet Explorer (IE6, IE7,\nand IE8)", "does not", "support", "max-age", ".", "del_cookie", "(", "name", ",", "*", ",", "path='/'", ",", "domain=None", ")", "[source]", "Deletes cookie.", "Parameters:", "name", "(", "str", ") \u2013 cookie name", "domain", "(", "str", ") \u2013 optional cookie domain", "path", "(", "str", ") \u2013 optional cookie path,", "'/'", "by default", "Changed in version 1.0:", "Fixed cookie expiration support for\nInternet Explorer (version less than 11).", "content_length", "Content-Length", "for outgoing response.", "content_type", "Content", "part of", "Content-Type", "for outgoing response.", "charset", "Charset", "aka", "encoding", "part of", "Content-Type", "for outgoing response.", "The value converted to lower-case on attribute assigning.", "last_modified", "Last-Modified", "header for outgoing response.", "This property accepts raw", "str", "values,", "datetime.datetime", "objects, Unix timestamps specified\nas an", "int", "or a", "float", "object, and the\nvalue", "None", "to unset the header.", "tcp_cork", "TCP_CORK", "(linux) or", "TCP_NOPUSH", "(FreeBSD and MacOSX) is applied to underlying transport if the\nproperty is", "True", ".", "Use", "set_tcp_cork()", "to assign new value to the property.", "Default value is", "False", ".", "set_tcp_cork", "(", "value", ")", "[source]", "Set", "tcp_cork", "property to", "value", ".", "Clear", "tcp_nodelay", "if", "value", "is", "True", ".", "tcp_nodelay", "TCP_NODELAY", "is applied to underlying transport\nif the property is", "True", ".", "Use", "set_tcp_nodelay()", "to assign new value to the property.", "Default value is", "True", ".", "set_tcp_nodelay", "(", "value", ")", "[source]", "Set", "tcp_nodelay", "property to", "value", ".", "Clear", "tcp_cork", "if", "value", "is", "True", ".", "start", "(", "request", ")", "[source]", "Parameters:", "request", "(", "aiohttp.web.Request", ") \u2013 HTTP request object, that the\nresponse answers.", "Send", "HTTP header", ". You should not change any header data after\ncalling this method.", "Deprecated since version 0.18:", "Use", "prepare()", "instead.", "Warning", "The method doesn\u2019t call", "web.Application.on_response_prepare", "signal, use", "prepare()", "instead.", "coroutine", "prepare", "(", "request", ")", "[source]", "Parameters:", "request", "(", "aiohttp.web.Request", ") \u2013 HTTP request object, that the\nresponse answers.", "Send", "HTTP header", ". You should not change any header data after\ncalling this method.", "The coroutine calls", "web.Application.on_response_prepare", "signal handlers.", "New in version 0.18.", "write", "(", "data", ")", "[source]", "Send byte-ish data as the part of", "response BODY", ".", "prepare()", "must be called before.", "Raises", "TypeError", "if data is not", "bytes", ",", "bytearray", "or", "memoryview", "instance.", "Raises", "RuntimeError", "if", "prepare()", "has not been called.", "Raises", "RuntimeError", "if", "write_eof()", "has been called.", "coroutine", "drain", "(", ")", "[source]", "A", "coroutine", "to let the write buffer of the\nunderlying transport a chance to be flushed.", "The intended use is to write:", "resp", ".", "write", "(", "data", ")", "await", "resp", ".", "drain", "()", "Yielding from", "drain()", "gives the opportunity for the loop\nto schedule the write operation and flush the buffer. It should\nespecially be used when a possibly large amount of data is\nwritten to the transport, and the coroutine does not yield-from\nbetween calls to", "write()", ".", "coroutine", "write_eof", "(", ")", "[source]", "A", "coroutine", "may", "be called as a mark of the", "HTTP response", "processing finish.", "Internal machinery", "will call this method at the end of\nthe request processing if needed.", "After", "write_eof()", "call any manipulations with the", "response", "object are forbidden.", "Response", "class", "aiohttp.web.", "Response", "(", "*", ",", "status=200", ",", "headers=None", ",", "content_type=None", ",", "charset=None", ",", "body=None", ",", "text=None", ")", "[source]", "The most usable response class, inherited from", "StreamResponse", ".", "Accepts", "body", "argument for setting the", "HTTP response BODY", ".", "The actual", "body", "sending happens in overridden", "write_eof()", ".", "Parameters:", "body", "(", "bytes", ") \u2013 response\u2019s BODY", "status", "(", "int", ") \u2013 HTTP status code, 200 OK by default.", "headers", "(", "collections.abc.Mapping", ") \u2013 HTTP headers that should be added to\nresponse\u2019s ones.", "text", "(", "str", ") \u2013 response\u2019s BODY", "content_type", "(", "str", ") \u2013 response\u2019s content type.", "'text/plain'", "if", "text", "is passed also,", "'application/octet-stream'", "otherwise.", "charset", "(", "str", ") \u2013 response\u2019s charset.", "'utf-8'", "if", "text", "is\npassed also,", "None", "otherwise.", "body", "Read-write attribute for storing response\u2019s content aka BODY,", "bytes", ".", "Setting", "body", "also recalculates", "content_length", "value.", "Resetting", "body", "(assigning", "None", ") sets", "content_length", "to", "None", "too, dropping", "Content-Length", "HTTP header.", "text", "Read-write attribute for storing response\u2019s content, represented as\nstring,", "str", ".", "Setting", "text", "also recalculates", "content_length", "value and", "body", "value", "Resetting", "text", "(assigning", "None", ") sets", "content_length", "to", "None", "too, dropping", "Content-Length", "HTTP header.", "WebSocketResponse", "class", "aiohttp.web.", "WebSocketResponse", "(", "*", ",", "timeout=10.0", ",", "autoclose=True", ",", "autoping=True", ",", "protocols=()", ")", "[source]", "Class for handling server-side websockets, inherited from", "StreamResponse", ".", "After starting (by", "prepare()", "call) the response you\ncannot use", "write()", "method but should to\ncommunicate with websocket client by", "send_str()", ",", "receive()", "and others.", "New in version 0.19:", "The class supports", "async", "for", "statement for iterating over\nincoming messages:", "ws", "=", "web", ".", "WebSocketResponse", "()", "await", "ws", ".", "prepare", "(", "request", ")", "async", "for", "msg", "in", "ws", ":", "print", "(", "msg", ".", "data", ")", "coroutine", "prepare", "(", "request", ")", "[source]", "Starts websocket. After the call you can use websocket methods.", "Parameters:", "request", "(", "aiohttp.web.Request", ") \u2013 HTTP request object, that the\nresponse answers.", "Raises:", "HTTPException", "\u2013 if websocket handshake has failed.", "New in version 0.18.", "start", "(", "request", ")", "[source]", "Starts websocket. After the call you can use websocket methods.", "Parameters:", "request", "(", "aiohttp.web.Request", ") \u2013 HTTP request object, that the\nresponse answers.", "Raises:", "HTTPException", "\u2013 if websocket handshake has failed.", "Deprecated since version 0.18:", "Use", "prepare()", "instead.", "can_prepare", "(", "request", ")", "[source]", "Performs checks for", "request", "data to figure out if websocket\ncan be started on the request.", "If", "can_prepare()", "call is success then", "prepare()", "will\nsuccess too.", "Parameters:", "request", "(", "aiohttp.web.Request", ") \u2013 HTTP request object, that the\nresponse answers.", "Returns:", "WebSocketReady", "instance.", "WebSocketReady.ok", "is", "True", "on success,", "WebSocketReady.protocol", "is\nwebsocket subprotocol which is passed by client and\naccepted by server (one of", "protocols", "sequence from", "WebSocketResponse", "ctor).", "WebSocketReady.protocol", "may be", "None", "if\nclient and server subprotocols are not overlapping.", "Note", "The method never raises exception.", "can_start", "(", "request", ")", "[source]", "Deprecated alias for", "can_prepare()", "Deprecated since version 0.18.", "closed", "Read-only property,", "True", "if connection has been closed or in process\nof closing.", "CLOSE", "message has been received from peer.", "close_code", "Read-only property, close code from peer. It is set to", "None", "on\nopened connection.", "protocol", "Websocket", "subprotocol", "chosen after", "start()", "call.", "May be", "None", "if server and client protocols are\nnot overlapping.", "exception", "(", ")", "[source]", "Returns last occurred exception or None.", "ping", "(", "message=b''", ")", "[source]", "Send", "PING", "to peer.", "Parameters:", "message", "\u2013 optional payload of", "ping", "message,", "str", "(converted to", "UTF-8", "encoded bytes)\nor", "bytes", ".", "Raises:", "RuntimeError", "\u2013 if connections is not started or closing.", "pong", "(", "message=b''", ")", "[source]", "Send", "unsolicited", "PONG", "to peer.", "Parameters:", "message", "\u2013 optional payload of", "pong", "message,", "str", "(converted to", "UTF-8", "encoded bytes)\nor", "bytes", ".", "Raises:", "RuntimeError", "\u2013 if connections is not started or closing.", "send_str", "(", "data", ")", "[source]", "Send", "data", "to peer as", "TEXT", "message.", "Parameters:", "data", "(", "str", ") \u2013 data to send.", "Raises:", "RuntimeError", "\u2013 if connection is not started or closing", "TypeError", "\u2013 if data is not", "str", "send_bytes", "(", "data", ")", "[source]", "Send", "data", "to peer as", "BINARY", "message.", "Parameters:", "data", "\u2013 data to send.", "Raises:", "RuntimeError", "\u2013 if connection is not started or closing", "TypeError", "\u2013 if data is not", "bytes", ",", "bytearray", "or", "memoryview", ".", "send_json", "(", "data", ",", "*", ",", "dumps=json.loads", ")", "[source]", "Send", "data", "to peer as JSON string.", "Parameters:", "data", "\u2013 data to send.", "dumps", "(", "callable", ") \u2013 any", "callable", "that accepts an object and\nreturns a JSON string\n(", "json.dumps()", "by default).", "Raises:", "RuntimeError", "\u2013 if connection is not started or closing", "ValueError", "\u2013 if data is not serializable object", "TypeError", "\u2013 if value returned by", "dumps", "param is not", "str", "coroutine", "close", "(", "*", ",", "code=1000", ",", "message=b''", ")", "[source]", "A", "coroutine", "that initiates closing\nhandshake by sending", "CLOSE", "message.", "Note", "Can only be called by the request handling task. To\nprogrammatically close websocket server side see the", "FAQ section", ".", "Parameters:", "code", "(", "int", ") \u2013 closing code", "message", "\u2013 optional payload of", "pong", "message,", "str", "(converted to", "UTF-8", "encoded bytes)\nor", "bytes", ".", "Raises:", "RuntimeError", "\u2013 if connection is not started or closing", "coroutine", "receive", "(", ")", "[source]", "A", "coroutine", "that waits upcoming", "data", "message from peer and returns it.", "The coroutine implicitly handles", "PING", ",", "PONG", "and", "CLOSE", "without returning the\nmessage.", "It process", "ping-pong game", "and performs", "closing handshake", "internally.", "After websocket closing raises", "WSClientDisconnectedError", "with\nconnection closing data.", "Note", "Can only be called by the request handling task.", "Returns:", "WSMessage", "Raises:", "RuntimeError", "\u2013 if connection is not started", "Raise:", "WSClientDisconnectedError", "on closing.", "coroutine", "receive_str", "(", ")", "[source]", "A", "coroutine", "that calls", "receive()", "but\nalso asserts the message type is", "TEXT", ".", "Note", "Can only be called by the request handling task.", "Return str:", "peer\u2019s message content.", "Raises:", "TypeError", "\u2013 if message is", "BINARY", ".", "coroutine", "receive_bytes", "(", ")", "[source]", "A", "coroutine", "that calls", "receive()", "but\nalso asserts the message type is", "BINARY", ".", "Note", "Can only be called by the request handling task.", "Return bytes:", "peer\u2019s message content.", "Raises:", "TypeError", "\u2013 if message is", "TEXT", ".", "coroutine", "receive_json", "(", "*", ",", "loads=json.loads", ")", "[source]", "A", "coroutine", "that calls", "receive_str()", "and loads the\nJSON string to a Python dict.", "Note", "Can only be called by the request handling task.", "Parameters:", "loads", "(", "callable", ") \u2013 any", "callable", "that accepts", "str", "and returns", "dict", "with parsed JSON (", "json.loads()", "by\ndefault).", "Return dict:", "loaded JSON content", "Raises:", "TypeError", "\u2013 if message is", "BINARY", ".", "ValueError", "\u2013 if message is not valid JSON.", "New in version 0.22.", "See also", "WebSockets handling", "WebSocketReady", "class", "aiohttp.web.", "WebSocketReady", "[source]", "A named tuple for returning result from", "WebSocketResponse.can_prepare()", ".", "Has", "bool", "check implemented, e.g.:", "if", "not", "await", "ws", ".", "can_prepare", "(", "...", "):", "cannot_start_websocket", "()", "ok", "True", "if websocket connection can be established,", "False", "otherwise.", "protocol", "str", "represented selected websocket sub-protocol.", "See also", "WebSocketResponse.can_prepare()", "json_response", "aiohttp.web.", "json_response", "(", "[", "data", ",", "]", "*", ",", "text=None", ",", "body=None", ",", "status=200", ",", "reason=None", ",", "headers=None", ",", "content_type='application/json'", ",", "dumps=json.dumps", ")", "[source]", "Return", "Response", "with predefined", "'application/json'", "content type and", "data", "encoded by", "dumps", "parameter\n(", "json.dumps()", "by default).", "Application and Router", "Application", "Application is a synonym for web-server.", "To get fully working example, you have to make", "application", ", register\nsupported urls in", "router", "and create a", "server socket", "with", "RequestHandlerFactory", "as a", "protocol\nfactory", ".", "RequestHandlerFactory", "could be constructed with", "Application.make_handler()", ".", "Application", "contains a", "router", "instance and a list of callbacks that\nwill be called during application finishing.", "Application", "is a", "dict", "-like object, so you can use it for", "sharing data", "globally by storing arbitrary\nproperties for later access from a", "handler", "via the", "Request.app", "property:", "app", "=", "Application", "(", "loop", "=", "loop", ")", "app", "[", "'database'", "]", "=", "await", "aiopg", ".", "create_engine", "(", "**", "db_config", ")", "async", "def", "handler", "(", "request", "):", "with", "(", "await", "request", ".", "app", "[", "'database'", "])", "as", "conn", ":", "conn", ".", "execute", "(", "\"DELETE * FROM table\"", ")", "Although", "Application", "is a", "dict", "-like object, it can\u2019t be\nduplicated like one using", "Application.copy()", ".", "class", "aiohttp.web.", "Application", "(", "*", ",", "loop=None", ",", "router=None", ",", "logger=<default>", ",", "middlewares=()", ",", "debug=False", ",", "**kwargs", ")", "[source]", "The class inherits", "dict", ".", "Parameters:", "loop", "\u2013", "event loop", "used\nfor processing HTTP requests.", "If param is", "None", "asyncio.get_event_loop()", "used for getting default event loop, but we strongly\nrecommend to use explicit loops everywhere.", "router", "\u2013", "aiohttp.abc.AbstractRouter", "instance, the system\ncreates", "UrlDispatcher", "by default if", "router", "is", "None", ".", "logger", "\u2013", "logging.Logger", "instance for storing application logs.", "By default the value is", "logging.getLogger(\"aiohttp.web\")", "middlewares", "\u2013", "list", "of middleware factories, see", "Middlewares", "for details.", "debug", "\u2013 Switches debug mode.", "router", "Read-only property that returns", "router instance", ".", "logger", "logging.Logger", "instance for storing application logs.", "loop", "event loop", "used for processing HTTP requests.", "debug", "Boolean value indicating whether the debug mode is turned on or off.", "on_response_prepare", "A", "Signal", "that is fired at the beginning\nof", "StreamResponse.prepare()", "with parameters", "request", "and", "response", ". It can be used, for example, to add custom headers to each\nresponse before sending.", "Signal handlers should have the following signature:", "async", "def", "on_prepare", "(", "request", ",", "response", "):", "pass", "on_startup", "A", "Signal", "that is fired on application start-up.", "Subscribers may use the signal to run background tasks in the event\nloop along with the application\u2019s request handler just after the\napplication start-up.", "Signal handlers should have the following signature:", "async", "def", "on_startup", "(", "app", "):", "pass", "See also", "Background tasks", ".", "on_shutdown", "A", "Signal", "that is fired on application shutdown.", "Subscribers may use the signal for gracefully closing long running\nconnections, e.g. websockets and data streaming.", "Signal handlers should have the following signature:", "async", "def", "on_shutdown", "(", "app", "):", "pass", "It\u2019s up to end user to figure out which", "web-handler", "s\nare still alive and how to finish them properly.", "We suggest keeping a list of long running handlers in", "Application", "dictionary.", "See also", "Graceful shutdown", "and", "on_cleanup", ".", "on_cleanup", "A", "Signal", "that is fired on application cleanup.", "Subscribers may use the signal for gracefully closing\nconnections to database server etc.", "Signal handlers should have the following signature:", "async", "def", "on_cleanup", "(", "app", "):", "pass", "See also", "Graceful shutdown", "and", "on_shutdown", ".", "make_handler", "(", "**kwargs", ")", "[source]", "Creates HTTP protocol factory for handling requests.", "Parameters:", "secure_proxy_ssl_header", "(", "tuple", ") \u2013", "Secure proxy SSL header. Can\nbe used to detect request scheme,\ne.g.", "secure_proxy_ssl_header=('X-Forwarded-Proto',", "'https')", ".", "Default:", "None", ".", "tcp_keepalive", "(", "bool", ") \u2013 Enable TCP Keep-Alive. Default:", "True", ".", "keepalive_timeout", "(", "int", ") \u2013 Number of seconds before closing Keep-Alive\nconnection. Default:", "75", "seconds (NGINX\u2019s default value).", "slow_request_timeout", "\u2013 Slow request timeout. Default:", "0", ".", "logger", "\u2013 Custom logger object. Default:", "aiohttp.log.server_logger", ".", "access_log", "\u2013 Custom logging object. Default:", "aiohttp.log.access_logger", ".", "access_log_format", "(", "str", ") \u2013 Access log format string. Default:", "helpers.AccessLogger.LOG_FORMAT", ".", "debug", "(", "bool", ") \u2013", "Switches debug mode. Default:", "False", ".", "Deprecated since version 1.0:", "The usage of", "debug", "parameter in", "Application.make_handler()", "is deprecated in favor of", "Application.debug", ".\nThe", "Application", "\u2018s debug mode setting should be used\nas a single point to setup a debug mode.", "max_line_size", "(", "int", ") \u2013 Optional maximum header line size. Default:", "8190", ".", "max_headers", "(", "int", ") \u2013 Optional maximum header size. Default:", "32768", ".", "max_field_size", "(", "int", ") \u2013 Optional maximum header field size. Default:", "8190", ".", "You should pass result of the method as", "protocol_factory", "to", "create_server()", ", e.g.:", "loop", "=", "asyncio", ".", "get_event_loop", "()", "app", "=", "Application", "(", "loop", "=", "loop", ")", "# setup route table", "# app.router.add_route(...)", "await", "loop", ".", "create_server", "(", "app", ".", "make_handler", "(),", "'0.0.0.0'", ",", "8080", ")", "coroutine", "startup", "(", ")", "[source]", "A", "coroutine", "that will be called along with the\napplication\u2019s request handler.", "The purpose of the method is calling", "on_startup", "signal\nhandlers.", "coroutine", "shutdown", "(", ")", "[source]", "A", "coroutine", "that should be called on\nserver stopping but before", "finish()", ".", "The purpose of the method is calling", "on_shutdown", "signal\nhandlers.", "coroutine", "cleanup", "(", ")", "[source]", "A", "coroutine", "that should be called on\nserver stopping but after", "shutdown()", ".", "The purpose of the method is calling", "on_cleanup", "signal\nhandlers.", "coroutine", "finish", "(", ")", "[source]", "A deprecated alias for", "cleanup()", ".", "Deprecated since version 0.21.", "register_on_finish(self, func, *args, **kwargs):", "Register", "func", "as a function to be executed at termination.\nAny optional arguments that are to be passed to", "func", "must be\npassed as arguments to", "register_on_finish()", ".  It is possible to\nregister the same function and arguments more than once.", "During the call of", "finish()", "all functions registered are called in\nlast in, first out order.", "func", "may be either regular function or", "coroutine", ",", "finish()", "will un-yield (", "await", ") the later.", "Deprecated since version 0.21:", "Use", "on_cleanup", "instead:", "app.on_cleanup.append(handler)", ".", "Note", "Application object has", "router", "attribute but has no", "add_route()", "method. The reason is: we want to support\ndifferent router implementations (even maybe not url-matching\nbased but traversal ones).", "For sake of that fact we have very trivial ABC for", "AbstractRouter", ": it should have only", "AbstractRouter.resolve()", "coroutine.", "No methods for adding routes or route reversing (getting URL by\nroute name). All those are router implementation details (but,\nsure, you need to deal with that methods after choosing the\nrouter for your application).", "RequestHandlerFactory", "A protocol factory compatible with", "create_server()", ".", "class", "aiohttp.web.", "RequestHandlerFactory", "[source]", "RequestHandlerFactory is responsible for creating HTTP protocol\nobjects that can handle HTTP connections.", "connections", "List of all currently opened connections.", "requests_count", "Amount of processed requests.", "New in version 1.0.", "coroutine", "finish_connections", "(", "timeout", ")", "[source]", "A", "coroutine", "that should be called to close all opened\nconnections.", "Router", "For dispatching URLs to", "handlers", "aiohttp.web", "uses", "routers", ".", "Router is any object that implements", "AbstractRouter", "interface.", "aiohttp.web", "provides an implementation called", "UrlDispatcher", ".", "Application", "uses", "UrlDispatcher", "as", "router()", "by default.", "class", "aiohttp.web.", "UrlDispatcher", "[source]", "Straightforward url-matching router, implements", "collections.abc.Mapping", "for access to", "named routes", ".", "Before running", "Application", "you should fill", "route\ntable", "first by calling", "add_route()", "and", "add_static()", ".", "Handler", "lookup is performed by iterating on\nadded", "routes", "in FIFO order. The first matching", "route", "will be used\nto call corresponding", "handler", ".", "If on route creation you specify", "name", "parameter the result is", "named route", ".", "Named route", "can be retrieved by", "app.router[name]", "call, checked for\nexistence by", "name", "in", "app.router", "etc.", "See also", "Route classes", "add_resource", "(", "path", ",", "*", ",", "name=None", ")", "[source]", "Append a", "resource", "to the end of route table.", "path", "may be either", "constant", "string like", "'/a/b/c'", "or", "variable rule", "like", "'/a/{var}'", "(see", "handling variable paths", ")", "Parameters:", "path", "(", "str", ") \u2013 resource path spec.", "name", "(", "str", ") \u2013 optional resource name.", "Returns:", "created resource instance (", "PlainResource", "or", "DynamicResource", ").", "add_route", "(", "method", ",", "path", ",", "handler", ",", "*", ",", "name=None", ",", "expect_handler=None", ")", "[source]", "Append", "handler", "to the end of route table.", "path", "may be either", "constant", "string like", "'/a/b/c'", "or", "variable rule", "like", "'/a/{var}'", "(see", "handling variable paths", ")", "Pay attention please:", "handler", "is converted to coroutine internally when\nit is a regular function.", "Parameters:", "method", "(", "str", ") \u2013", "HTTP method for route. Should be one of", "'GET'", ",", "'POST'", ",", "'PUT'", ",", "'DELETE'", ",", "'PATCH'", ",", "'HEAD'", ",", "'OPTIONS'", "or", "'*'", "for any method.", "The parameter is case-insensitive, e.g. you\ncan push", "'get'", "as well as", "'GET'", ".", "path", "(", "str", ") \u2013 route path. Should be started with slash (", "'/'", ").", "handler", "(", "callable", ") \u2013 route handler.", "name", "(", "str", ") \u2013 optional route name.", "expect_handler", "(", "coroutine", ") \u2013 optional", "expect", "header handler.", "Returns:", "new", "PlainRoute", "or", "DynamicRoute", "instance.", "add_get", "(", "path", ",", "*args", ",", "**kwargs", ")", "[source]", "Shortcut for adding a GET handler. Calls the", "add_route()", "with", "method", "equals to", "'GET'", ".", "New in version 1.0.", "add_post", "(", "path", ",", "*args", ",", "**kwargs", ")", "[source]", "Shortcut for adding a POST handler. Calls the", "add_route()", "with", "method", "equals to", "'POST'", ".", "New in version 1.0.", "add_put", "(", "path", ",", "*args", ",", "**kwargs", ")", "[source]", "Shortcut for adding a PUT handler. Calls the", "add_route()", "with", "method", "equals to", "'PUT'", ".", "New in version 1.0.", "add_patch", "(", "path", ",", "*args", ",", "**kwargs", ")", "[source]", "Shortcut for adding a PATCH handler. Calls the", "add_route()", "with", "method", "equals to", "'PATCH'", ".", "New in version 1.0.", "add_delete", "(", "path", ",", "*args", ",", "**kwargs", ")", "[source]", "Shortcut for adding a DELETE handler. Calls the", "add_route()", "with", "method", "equals to", "'DELETE'", ".", "New in version 1.0.", "add_static", "(", "prefix", ",", "path", ",", "*", ",", "name=None", ",", "expect_handler=None", ",", "chunk_size=256*1024", ",", "response_factory=StreamResponse                     show_index=False", ")", "[source]", "Adds a router and a handler for returning static files.", "Useful for serving static content like images, javascript and css files.", "On platforms that support it, the handler will transfer files more\nefficiently using the", "sendfile", "system call.", "In some situations it might be necessary to avoid using the", "sendfile", "system call even if the platform supports it. This can be accomplished by\nby setting environment variable", "AIOHTTP_NOSENDFILE=1", ".", "Warning", "Use", "add_static()", "for development only. In production,\nstatic content should be processed by web servers like", "nginx", "or", "apache", ".", "Changed in version 0.18.0:", "Transfer files using the", "sendfile", "system call on supported\nplatforms.", "Changed in version 0.19.0:", "Disable", "sendfile", "by setting environment variable", "AIOHTTP_NOSENDFILE=1", "Parameters:", "prefix", "(", "str", ") \u2013 URL path prefix for handled static files", "path", "\u2013 path to the folder in file system that contains\nhandled static files,", "str", "or", "pathlib.Path", ".", "name", "(", "str", ") \u2013 optional route name.", "expect_handler", "(", "coroutine", ") \u2013 optional", "expect", "header handler.", "chunk_size", "(", "int", ") \u2013", "size of single chunk for file\ndownloading, 256Kb by default.", "Increasing", "chunk_size", "parameter to,\nsay, 1Mb may increase file downloading\nspeed but consumes more memory.", "New in version 0.16.", "response_factory", "(", "callable", ") \u2013", "factory to use to generate a new\nresponse, defaults to", "StreamResponse", "and should\nexpose a compatible API.", "New in version 0.17.", "show_index", "(", "bool", ") \u2013 flag for allowing to show indexes of a directory,\nby default it\u2019s not allowed and HTTP/403 will\nbe returned on directory access.", "Returns:", "new", "StaticRoute", "instance.", "coroutine", "resolve", "(", "request", ")", "[source]", "A", "coroutine", "that returns", "AbstractMatchInfo", "for", "request", ".", "The method never raises exception, but returns", "AbstractMatchInfo", "instance with:", "http_exception", "assigned to", "HTTPException", "instance.", "handler", "which raises", "HTTPNotFound", "or", "HTTPMethodNotAllowed", "on handler\u2019s\nexecution if there is no registered route for", "request", ".", "Middlewares", "can process that exceptions to render\npretty-looking error page for example.", "Used by internal machinery, end user unlikely need to call the method.", "Note", "The method uses", "Request.raw_path", "for pattern\nmatching against registered routes.", "resources", "(", ")", "[source]", "The method returns a", "view", "for", "all", "registered resources.", "The view is an object that allows to:", "Get size of the router table:", "len", "(", "app", ".", "router", ".", "resources", "())", "Iterate over registered resources:", "for", "resource", "in", "app", ".", "router", ".", "resources", "():", "print", "(", "resource", ")", "Make a check if the resources is registered in the router table:", "route", "in", "app", ".", "router", ".", "resources", "()", "New in version 0.21.1.", "routes", "(", ")", "[source]", "The method returns a", "view", "for", "all", "registered routes.", "New in version 0.18.", "named_resources", "(", ")", "[source]", "Returns a", "dict", "-like", "types.MappingProxyType", "view", "over", "all", "named", "resources", ".", "The view maps every named resource\u2019s", "name", "to the", "BaseResource", "instance. It supports the usual", "dict", "-like operations, except for any mutable operations\n(i.e. it\u2019s", "read-only", "):", "len", "(", "app", ".", "router", ".", "named_resources", "())", "for", "name", ",", "resource", "in", "app", ".", "router", ".", "named_resources", "()", ".", "items", "():", "print", "(", "name", ",", "resource", ")", "\"name\"", "in", "app", ".", "router", ".", "named_resources", "()", "app", ".", "router", ".", "named_resources", "()[", "\"name\"", "]", "New in version 0.21.", "named_routes", "(", ")", "[source]", "An alias for", "named_resources()", "starting from aiohttp 0.21.", "New in version 0.19.", "Changed in version 0.21:", "The method is an alias for", "named_resources()", ", so it\niterates over resources instead of routes.", "Deprecated since version 0.21:", "Please use named", "resources", "instead of named", "routes", ".", "Several routes which belongs to the same resource shares the\nresource name.", "Resource", "Default router", "UrlDispatcher", "operates with", "resource", "s.", "Resource is an item in", "routing table", "which has a", "path", ", an optional\nunique", "name", "and at least one", "route", ".", "web-handler", "lookup is performed in the following way:", "Router iterates over", "resources", "one-by-one.", "If", "resource", "matches to requested URL the resource iterates over\nown", "routes", ".", "If route matches to requested HTTP method (or", "'*'", "wildcard) the\nroute\u2019s handler is used as found", "web-handler", ". The lookup is\nfinished.", "Otherwise router tries next resource from the", "routing table", ".", "If the end of", "routing table", "is reached and no", "resource", "/", "route", "pair found the", "router", "returns special", "AbstractMatchInfo", "instance with", "AbstractMatchInfo.http_exception", "is not", "None", "but", "HTTPException", "with  either", "HTTP 404 Not Found", "or", "HTTP 405 Method Not Allowed", "status code.\nRegistered", "AbstractMatchInfo.handler", "raises this exception on call.", "User should never instantiate resource classes but give it by", "UrlDispatcher.add_resource()", "call.", "After that he may add a", "route", "by calling", "Resource.add_route()", ".", "UrlDispatcher.add_route()", "is just shortcut for:", "router", ".", "add_resource", "(", "path", ")", ".", "add_route", "(", "method", ",", "handler", ")", "Resource with a", "name", "is called", "named resource", ".\nThe main purpose of", "named resource", "is constructing URL by route name for\npassing it into", "template engine", "for example:", "url", "=", "app", ".", "router", "[", "'resource_name'", "]", ".", "url", "(", "query", "=", "{", "'a'", ":", "1", ",", "'b'", ":", "2", "})", "Resource classes hierarchy:", "AbstractResource", "Resource", "PlainResource", "DynamicResource", "ResourceAdapter", "class", "aiohttp.web.", "AbstractResource", "[source]", "A base class for all resources.", "Inherited from", "collections.abc.Sized", "and", "collections.abc.Iterable", ".", "len(resource)", "returns amount of", "route", "s belongs to the resource,", "for", "route", "in", "resource", "allows to iterate over these routes.", "name", "Read-only", "name", "of resource or", "None", ".", "coroutine", "resolve", "(", "method", ",", "path", ")", "[source]", "Resolve resource by finding appropriate", "web-handler", "for", "(method,", "path)", "combination.", "Parameters:", "method", "(", "str", ") \u2013 requested HTTP method.", "path", "(", "str", ") \u2013", "path", "part of request.", "Returns:", "(", "match_info", ",", "allowed_methods", ") pair.", "allowed_methods", "is a", "set", "or HTTP methods accepted by\nresource.", "match_info", "is either", "UrlMappingMatchInfo", "if\nrequest is resolved or", "None", "if no", "route", "is\nfound.", "url", "(", "**kwargs", ")", "[source]", "Construct an URL for route with additional params.", "kwargs", "depends on a list accepted by inherited resource\nclass parameters.", "Returns:", "str", "\u2013 resulting URL.", "class", "aiohttp.web.", "Resource", "[source]", "A base class for new-style resources, inherits", "AbstractResource", ".", "add_route", "(", "method", ",", "handler", ",", "*", ",", "expect_handler=None", ")", "[source]", "Add a", "web-handler", "to resource.", "Parameters:", "method", "(", "str", ") \u2013", "HTTP method for route. Should be one of", "'GET'", ",", "'POST'", ",", "'PUT'", ",", "'DELETE'", ",", "'PATCH'", ",", "'HEAD'", ",", "'OPTIONS'", "or", "'*'", "for any method.", "The parameter is case-insensitive, e.g. you\ncan push", "'get'", "as well as", "'GET'", ".", "The method should be unique for resource.", "handler", "(", "callable", ") \u2013 route handler.", "expect_handler", "(", "coroutine", ") \u2013 optional", "expect", "header handler.", "Returns:", "new", "ResourceRoute", "instance.", "class", "aiohttp.web.", "PlainResource", "[source]", "A new-style resource, inherited from", "Resource", ".", "The class corresponds to resources with plain-text matching,", "'/path/to'", "for example.", "class", "aiohttp.web.", "DynamicResource", "[source]", "A new-style resource, inherited from", "Resource", ".", "The class corresponds to resources with", "variable", "matching,\ne.g.", "'/path/{to}/{param}'", "etc.", "class", "aiohttp.web.", "ResourceAdapter", "[source]", "An adapter for old-style routes.", "The adapter is used by", "router.register_route()", "call, the method\nis deprecated and will be removed eventually.", "Route", "Route has", "HTTP method", "(wildcard", "'*'", "is an option),", "web-handler", "and optional", "expect handler", ".", "Every route belong to some resource.", "Route classes hierarchy:", "AbstractRoute", "ResourceRoute", "Route", "PlainRoute", "DynamicRoute", "StaticRoute", "ResourceRoute", "is the route used for new-style resources,", "PlainRoute", "and", "DynamicRoute", "serves old-style\nroutes kept for backward compatibility only.", "StaticRoute", "is used for static file serving\n(", "UrlDispatcher.add_static()", ").  Don\u2019t rely on the route\nimplementation too hard, static file handling most likely will be\nrewritten eventually.", "So the only non-deprecated and not internal route is", "ResourceRoute", "only.", "class", "aiohttp.web.", "AbstractRoute", "[source]", "Base class for routes served by", "UrlDispatcher", ".", "method", "HTTP method handled by the route, e.g.", "GET", ",", "POST", "etc.", "handler", "handler", "that processes the route.", "name", "Name of the route, always equals to name of resource which owns the route.", "resource", "Resource instance which holds the route.", "url", "(", "*", ",", "query=None", ",", "**kwargs", ")", "[source]", "Abstract method for constructing url handled by the route.", "query", "is a mapping or list of", "(name, value)", "pairs for\nspecifying", "query", "part of url (parameter is processed by", "urlencode()", ").", "Other available parameters depends on concrete route class and\ndescribed in descendant classes.", "Note", "The method is kept for sake of backward compatibility, usually\nyou should use", "Resource.url()", "instead.", "coroutine", "handle_expect_header", "(", "request", ")", "[source]", "100-continue", "handler.", "class", "aiohttp.web.", "ResourceRoute", "[source]", "The route class for handling different HTTP methods for", "Resource", ".", "class", "aiohttp.web.", "PlainRoute", "[source]", "The route class for handling plain", "URL path", ", e.g.", "\"/a/b/c\"", "url", "(", "*", ",", "parts", ",", "query=None", ")", "[source]", "Construct url, doesn\u2019t accepts extra parameters:", ">>>", "route", ".", "url", "(", "query", "=", "{", "'d'", ":", "1", ",", "'e'", ":", "2", "})", "'/a/b/c/?d=1&e=2'", "class", "aiohttp.web.", "DynamicRoute", "[source]", "The route class for handling", "variable\npath", ", e.g.", "\"/a/{name1}/{name2}\"", "url", "(", "*", ",", "parts", ",", "query=None", ")", "[source]", "Construct url with given", "dynamic parts", ":", ">>>", "route", ".", "url", "(", "parts", "=", "{", "'name1'", ":", "'b'", ",", "'name2'", ":", "'c'", "},", "query={'d': 1, 'e': 2})", "'/a/b/c/?d=1&e=2'", "class", "aiohttp.web.", "StaticRoute", "[source]", "The route class for handling static files, created by", "UrlDispatcher.add_static()", "call.", "url", "(", "*", ",", "filename", ",", "query=None", ")", "[source]", "Construct url for given", "filename", ":", ">>>", "route", ".", "url", "(", "filename", "=", "'img/logo.png'", ",", "query", "=", "{", "'param'", ":", "1", "})", "'/path/to/static/img/logo.png?param=1'", "MatchInfo", "After route matching web application calls found handler if any.", "Matching result can be accessible from handler as", "Request.match_info", "attribute.", "In general the result may be any object derived from", "AbstractMatchInfo", "(", "UrlMappingMatchInfo", "for default", "UrlDispatcher", "router).", "class", "aiohttp.web.", "UrlMappingMatchInfo", "[source]", "Inherited from", "dict", "and", "AbstractMatchInfo", ". Dict\nitems are filled by matching info and is", "resource", "-specific.", "expect_handler", "A coroutine for handling", "100-continue", ".", "handler", "A coroutine for handling request.", "route", "Route", "instance for url matching.", "View", "class", "aiohttp.web.", "View", "(", "request", ")", "[source]", "Inherited from", "AbstractView", ".", "Base class for class based views. Implementations should derive from", "View", "and override methods for handling HTTP verbs like", "get()", "or", "post()", ":", "class", "MyView", "(", "View", "):", "async", "def", "get", "(", "self", "):", "resp", "=", "await", "get_response", "(", "self", ".", "request", ")", "return", "resp", "async", "def", "post", "(", "self", "):", "resp", "=", "await", "post_response", "(", "self", ".", "request", ")", "return", "resp", "app", ".", "router", ".", "add_route", "(", "'*'", ",", "'/view'", ",", "MyView", ")", "The view raises", "405 Method Not allowed", "(", "HTTPMethodNowAllowed", ") if requested web verb is not\nsupported.", "Parameters:", "request", "\u2013 instance of", "Request", "that has initiated a view\nprocessing.", "request", "Request sent to view\u2019s constructor, read-only property.", "Overridable coroutine methods:", "connect()", ",", "delete()", ",", "get()", ",", "head()", ",", "options()", ",", "patch()", ",", "post()", ",", "put()", ",", "trace()", ".", "See also", "Class Based Views", "Utilities", "class", "aiohttp.web.", "FileField", "A", "namedtuple", "instance that is returned as\nmultidict value by", "Request.POST()", "if field is uploaded file.", "name", "Field name", "filename", "File name as specified by uploading (client) side.", "file", "An", "io.IOBase", "instance with content of uploaded file.", "content_type", "MIME type", "of uploaded file,", "'text/plain'", "by default.", "See also", "File Uploads", "aiohttp.web.", "run_app", "(", "app", ",", "*", ",", "host='0.0.0.0'", ",", "port=None", ",", "loop=None", ",", "shutdown_timeout=60.0", ",", "ssl_context=None", ",", "print=print", ",", "backlog=128", ")", "[source]", "A utility function for running an application, serving it until\nkeyboard interrupt and performing a", "Graceful shutdown", ".", "Suitable as handy tool for scaffolding aiohttp based projects.\nPerhaps production config will use more sophisticated runner but it\ngood enough at least at very beginning stage.", "The function uses", "app.loop", "as event loop to run.", "Parameters:", "app", "\u2013", "Application", "instance to run", "host", "(", "str", ") \u2013 host for HTTP server,", "'0.0.0.0'", "by default", "port", "(", "int", ") \u2013 port for HTTP server. By default is", "8080", "for\nplain text HTTP and", "8443", "for HTTP via SSL\n(when", "ssl_context", "parameter is specified).", "shutdown_timeout", "(", "int", ") \u2013", "a delay to wait for graceful server\nshutdown before disconnecting all\nopen client sockets hard way.", "A system with properly", "Graceful shutdown", "implemented never waits for this\ntimeout but closes a server in a few\nmilliseconds.", "ssl_context", "\u2013", "ssl.SSLContext", "for HTTPS server,", "None", "for HTTP connection.", "print", "\u2013 a callable compatible with", "print()", ". May be used\nto override STDOUT output or suppress it.", "backlog", "(", "int", ") \u2013 the number of unaccepted connections that the\nsystem will allow before refusing new\nconnections (", "128", "by default).", "Constants", "class", "aiohttp.web.", "ContentCoding", "[source]", "An", "enum.Enum", "class of available Content Codings.", "deflate", "DEFLATE compression", "gzip", "GZIP compression", "identity", "no compression", "Please enable JavaScript to view the", "comments powered by Disqus.", "blog comments powered by", "Disqus", "http client/server for asyncio", "Navigation", "HTTP Client", "HTTP Client Reference", "HTTP Server Tutorial", "HTTP Server Usage", "HTTP Server Reference", "Request", "Response classes", "StreamResponse", "Response", "WebSocketResponse", "WebSocketReady", "json_response", "Application and Router", "Application", "RequestHandlerFactory", "Router", "Resource", "Route", "MatchInfo", "View", "Utilities", "Constants", "Abstract Base Classes", "Low-level HTTP Server", "Working with Multipart", "Streaming API", "Helpers API", "Logging", "Testing", "Deployment using Gunicorn", "Frequently Asked Questions", "Router refactoring in 0.21", "Contributing", "CHANGES", "Glossary", "Quick search", "Enter search terms or a module, class or function name.", "\u00a92013-2016, KeepSafe.\n      \n      |\n      Powered by", "Sphinx 1.3.5", "&", "Alabaster 0.7.9", "|", "Page source"]